{"version":3,"sources":["components/NavBar.js","components/Event.js","components/HealthLog.js","components/PetCard.js","components/PetList.js","components/HealthTipCard.js","components/HealthTips.js","components/EditPet.js","pages/HomePage.js","components/LoginForm.js","components/SignupForm.js","pages/Login.js","pages/NewPet.js","components/App.js","reportWebVitals.js","index.js"],"names":["NavBar","user","setUser","username","className","to","id","onClick","fetch","method","then","r","ok","Event","petId","useState","text","setText","type","value","onChange","e","target","HealthLog","initialView","headerToolbar","left","center","right","plugins","dayGridPlugin","timeGridPlugin","interactionPlugin","editable","selectable","selectMirror","select","selectInfo","title","prompt","calendarApi","view","calendar","unselect","addEvent","start","startStr","end","endStr","headers","body","JSON","stringify","pet_id","json","data","console","log","events","url","color","textColor","eventClick","clickInfo","window","confirm","event","remove","PetCard","pet","selectPet","onDeletePet","onUpdatePet","name","sex","age","weight","petImage","pet_image","healthIssue","health_issues","type_of_pet","showLog","setShowLog","Card","Content","Image","src","alt","Description","PetList","pets","setPets","handleDeletePet","updatedPets","filter","length","map","HealthTipCard","HealthTips","healthTips","setHealthTips","useEffect","tips","tip","randomTip","Math","floor","random","Container","EditPet","selectedPet","onPetChange","errors","handleImageChange","setName","setType","setAge","setSex","setWeight","setHealthIssue","setPetId","onSubmit","preventDefault","HomePage","setSelectedPet","width","height","frameBorder","class","allowFullScreen","href","LoginForm","onLogin","setUsername","password","setPassword","setErrors","error","SignUpForm","passwordConfirmation","setPasswordConfirmation","password_confirmation","Login","showLoginForm","setShowLoginForm","Button","SignupForm","NewPet","setPetImage","navigate","useNavigate","formData","FormData","append","accept","files","App","petObj","exact","path","element","_","updatedPetList","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"iRAkCeA,MA/Bf,YAAkC,IAAjBC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,QAWnB,OACI,qCACC,2CAAcD,EAAKE,SAAnB,OACD,oBAAIC,UAAU,QAAd,SACI,cAAC,IAAD,CAAMC,GAAG,IAAT,SAAa,mDAEjB,8BACI,wBAAQC,GAAG,gBAAgBC,QAhBnC,WACIC,MAAM,cAAe,CACjBC,OAAQ,WACTC,MAAK,SAACC,GACDA,EAAEC,IACFV,EAAQ,UAWZ,sBAEJ,8BACI,wBAAQI,GAAG,iBAAX,SACI,cAAC,IAAD,CAAMD,GAAG,OAAT,4B,iDC8BDQ,MArDf,YAAwB,EAARC,MAAS,IAErB,EAAkCC,mBAAS,CAAC,UAA5C,mBACA,GADA,UACwBA,mBAAS,OAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAkCA,OACI,qCACA,+BAGI,uBACAC,KAAK,OACLC,MAAOH,EACPI,SAAU,SAACC,GAAD,OAAOJ,EAAQI,EAAEC,OAAOH,QAHlC,6BAMJ,wBAAQD,KAAK,SAAb,wBC6EOK,MAtHf,YAA0B,IAANjB,EAAK,EAALA,GAyEhB,OACI,mCACA,qBAAKA,GAAG,WAAR,SACA,cAAC,IAAD,CACAkB,YAAY,eAEZC,cAAe,CACXC,KAAM,iCACNC,OAAQ,QACRC,MAAO,yCAOXC,QAAS,CAACC,IAAeC,IAAgBC,KAEzCC,UAAU,EACVC,YAAY,EACZC,cAAc,EACdC,OAjFsB,SAACC,GAEvB,IAAIC,EAAQC,OAAO,2CACfC,EAAcH,EAAWI,KAAKC,SAElCF,EAAYG,WAERL,IACFE,EAAYI,SAAS,CAEnBN,QACAO,MAAOR,EAAWS,SAClBC,IAAKV,EAAWW,SAQlBxC,MAAM,aAAc,CAClBC,OAAQ,OACRwC,QAAS,CACL,eAAgB,oBAGpBC,KAAMC,KAAKC,UAAU,CAEjBd,MAAOA,EACPe,OAAQ/C,EACRuC,MAAOR,EAAWS,SAClBC,IAAKV,EAAWW,WAQvBtC,MAAK,SAACC,GAAD,OAAOA,EAAE2C,UACd5C,MAAK,SAAC6C,GAAD,OAAUC,QAAQC,IAAIF,QA0C5BG,OAAS,CACPC,IAAI,YAAD,OAAcrD,GACjBsD,MAAO,QACPC,UAAW,SAIbC,WAzCqB,SAACC,GACrBC,OAAOC,QAAP,qDAA6DF,EAAUG,MAAM5B,MAA7E,SAEDyB,EAAUG,MAAMC,SAEhB3D,MAAM,cAAD,OAAeuD,EAAUG,MAAM5D,IAClC,CACAG,OAAQ,oBCqCH2D,MA7Gf,YAA+D,IAA7CC,EAA4C,EAA5CA,IAAKC,EAAuC,EAAvCA,UAAWC,EAA4B,EAA5BA,YAKvBjE,GALmD,EAAfkE,YAKNH,EAA9B/D,IAAImE,EAA0BJ,EAA1BI,KAAMC,EAAoBL,EAApBK,IAAKC,EAAeN,EAAfM,IAAKC,EAAUP,EAAVO,OAErBC,EAAWR,EAAIS,UACfC,EAAcV,EAAIW,cAClB9D,EAAOmD,EAAIY,YAEjB,EAA8BlE,oBAAS,GAAvC,mBAAOmE,EAAP,KAAgBC,EAAhB,KAqDA,OACI,mCACA,cAACC,EAAA,EAAD,CAAMhF,UAAU,YAAhB,SACI,eAACgF,EAAA,EAAKC,QAAN,WACI,6BAAKZ,IACL,cAACa,EAAA,EAAD,CAAOlF,UAAU,YAAYmF,IAAKV,EAAUW,IAAI,WAC3C,eAACJ,EAAA,EAAKK,YAAN,CAAkBnF,GAAG,WAArB,UACD,+BACCoE,IAED,uBACA,+BAAOxD,IACP,uBACG,yCAAYyD,KACZ,uBACA,4CAAeC,EAAf,UACA,uBACA,mDAAsBG,KACtB,uBAEC,wBAAQ3E,UAAU,aAAlB,SACA,cAAC,IAAD,CAAMG,QAAS,kBAAM+D,EAAUD,IAAMhE,GAAI,SAAUC,EAAnD,yBAID,wBAAQF,UAAU,aACjBG,QAAS,kBAAMgE,EAAYjE,IAD5B,oBAIC,wBACAF,UAAU,aACVG,QAAS,kBAAM4E,GAAYD,IAF3B,2BAGCA,EAAU,cAAC,EAAD,CAAW5E,GAAIA,IAAQ,gBCsB3CoF,MArHf,YAA+C,IAA7BC,EAA4B,EAA5BA,KAAMrB,EAAsB,EAAtBA,UAAWsB,EAAW,EAAXA,QAkB/B,SAASC,EAAgBvF,GAErB,IAAMwF,EAAcH,EAAKI,QAAO,SAAC1B,GAAD,OAASA,EAAI/D,KAAQA,KAErDE,MAAM,aAAD,OAAcF,GAAM,CACtBG,OAAQ,WAEXmF,EAAQE,GAgEZ,OACI,mCACCH,EAAKK,OAAS,EACXL,EAAKM,KAAI,SAAC5B,GAAD,OAEL,cAAC,EAAD,CAEAA,IAAKA,EACLC,UAAWA,EACXC,YAAasB,GAJCxB,EAAI/D,OAUtB,mCAED,4K,SCjGI4F,MAbf,YAAgC,IAARlF,EAAO,EAAPA,KAEpB,OACI,mCAGI,4BAAIA,OCyBDmF,MA7Bf,WAEI,MAAoCpF,mBAAS,IAA7C,mBAAOqF,EAAP,KAAmBC,EAAnB,KAEAC,qBAAU,WACN9F,MAAM,oBACLE,MAAK,SAACC,GAAD,OAAOA,EAAE2C,UACd5C,MAAK,SAAC6C,GAAD,OAAU8C,EAAc9C,QAChC,IACF,IAAMgD,EAAOH,EAAWH,KAAI,SAACO,GAAD,OACxB,cAAC,EAAD,CAA4BxF,KAAMwF,EAAIxF,MAAlBwF,EAAIlG,OAGtBmG,EAAYF,EAAKG,KAAKC,MAAMD,KAAKE,SAAWL,EAAKP,SAEvD,OACI,mCACA,6BACA,eAACa,EAAA,EAAD,CAAWzG,UAAU,cAArB,UACA,mEACA,6BACCqG,YCmHMK,MAxIf,YAIO,EAHJ7G,KAGK,IAHC8G,EAGF,EAHEA,YAAaC,EAGf,EAHeA,YAQlB,GALG,EAH4BC,OAG5B,EAHoCC,kBAQfnG,mBAAS,KAAjC,mBAAO0D,EAAP,KAAa0C,EAAb,KACA,EAAwBpG,mBAAS,IAAjC,mBAAOG,EAAP,KAAakG,EAAb,KACA,EAAsBrG,mBAAS,IAA/B,mBAAO4D,EAAP,KAAY0C,EAAZ,KACA,EAAsBtG,mBAAS,IAA/B,mBAAO2D,EAAP,KAAY4C,EAAZ,KACA,EAA4BvG,mBAAS,IAArC,mBAAO6D,EAAP,KAAe2C,EAAf,KACA,EAAsCxG,mBAAS,IAA/C,mBAAOgE,EAAP,KAAoByC,EAApB,KAGA,EAAuBzG,mBAAS,GAAhC,mBAAOT,EAAP,KAAWmH,EAAX,KA+CA,OA5CAnB,qBAAU,WACRmB,EAASV,EAAYzG,IACrB6G,EAAQJ,EAAYtC,MACpB4C,EAAON,EAAYpC,KACnB4C,EAAUR,EAAYnC,QACtBwC,EAAQL,EAAY9B,aACpBqC,EAAOP,EAAYrC,KACnB8C,EAAeT,EAAY/B,iBAG1B,CAAC+B,IAmCA,mCAGA,uBAECW,SAtCL,SAAsBrG,GACpBA,EAAEsG,iBAaFX,EAZmB,CACjB1G,GAAIA,EACJmE,KAAMA,EACNE,IAAKA,EACLC,OAAQA,EACRI,cAAeD,EACfL,IAAKA,EACLO,YAAa/D,KA2Bb,UAGI,2CACA,uBACAA,KAAK,OACLZ,GAAG,WACHa,MAAOsD,EACPrD,SAAU,SAACC,GAAD,OAAO8F,EAAQ9F,EAAEC,OAAOH,UAElC,2CACA,uBACAD,KAAK,OACLZ,GAAG,WACHa,MAAOD,EACPE,SAAU,SAACC,GAAD,OAAO+F,EAAS/F,EAAEC,OAAOH,UAEjC,0CACF,uBACAD,KAAK,OACLZ,GAAG,UACHa,MAAOuD,EACPtD,SAAU,SAACC,GAAD,OAAOiG,EAAQjG,EAAEC,OAAOH,UAEhC,0CACF,uBACAD,KAAK,OACLZ,GAAG,UACHa,MAAOwD,EACPvD,SAAU,SAACC,GAAD,OAAOgG,EAAOhG,EAAEC,OAAOH,UAE/B,6CACF,uBACAD,KAAK,OACLZ,GAAG,aACHa,MAAOyD,EACPxD,SAAU,SAACC,GAAD,OAAOkG,EAAUlG,EAAEC,OAAOH,UAElC,oDACF,uBACAD,KAAK,OACLZ,GAAG,mBACHa,MAAO4D,EACP3D,SAAU,SAACC,GAAD,OAAOmG,EAAgBnG,EAAEC,OAAOH,UAK1C,wBAAQD,KAAK,SAAb,0BCvEG0G,MA5Cf,YAAkF,IAA/DtD,EAA8D,EAA9DA,UAAwCqB,GAAsB,EAAnDoB,YAAmD,EAAtCc,eAAsC,EAAtBlC,MAAMC,EAAgB,EAAhBA,QAa7D,OAb6E,EAAP3F,KAGtEqG,qBAAU,WACN9F,MAAM,aACLE,MAAK,SAACC,GAAD,OAAOA,EAAE2C,UACd5C,KAAKkF,KAEP,IAMC,qCAIA,cAAC,EAAD,CAASD,KAAMA,EAAMC,QAASA,EAAStB,UAAWA,IAIlD,sBAAKhE,GAAI,gBAAT,UACI,wBAAQiF,IAAI,6CAA6CuC,MAAM,MAAMC,OAAO,MAAMC,YAAY,IAAIC,MAAM,cAAcC,iBAAe,IAAU,mBAAGC,KAAK,wFAEvJ,wBAAQ5C,IAAI,wCAAwCuC,MAAM,MAAMC,OAAO,MAAMC,YAAY,IAAI5H,UAAU,cAAc8H,iBAAe,IAAU,mBAAGC,KAAK,8DAGtJ,wBAAQ5C,IAAI,wCAAwCuC,MAAM,MAAMC,OAAO,MAAMC,YAAY,IAAIC,MAAM,cAAcC,iBAAe,IAAU,mBAAGC,KAAK,+DAWtJ,cAAC,EAAD,QCSOC,MAnDf,YAA+B,IAAXC,EAAU,EAAVA,QAEhB,EAAgCtH,mBAAS,IAAzC,mBAAOZ,EAAP,KAAiBmI,EAAjB,KACA,EAAgCvH,mBAAS,IAAzC,mBAAOwH,EAAP,KAAiBC,EAAjB,KACA,EAA4BzH,mBAAS,IAArC,mBAAOkG,EAAP,KAAewB,EAAf,KAoBA,OACI,mCACA,uBAAMf,SApBV,SAAsBrG,GAClBA,EAAEsG,iBACFnH,MAAM,aAAc,CAChBC,OAAQ,OACRwC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CAACjD,WAAUoI,eACjC7H,MAAK,SAACC,GACDA,EAAEC,GACFD,EAAE2C,OAAO5C,MAAK,SAACT,GAAD,OAAUoI,EAAQpI,MAGhCU,EAAE2C,OAAO5C,MAAK,SAACgI,GAAD,OAAWD,EAAUC,EAAMzB,eAOjD,UACI,6CACA,uBACA/F,KAAK,OACLZ,GAAG,WACHa,MAAOhB,EACPiB,SAAU,SAACC,GAAD,OAAOiH,EAAYjH,EAAEC,OAAOH,UAGtC,6CACA,uBACAD,KAAK,WACLZ,GAAG,WACHa,MAAOoH,EACPnH,SAAU,SAACC,GAAD,OAAOmH,EAAYnH,EAAEC,OAAOH,UAEtC,wBAAQD,KAAK,SAAb,mBACA,4BAAI+F,EAAOhB,KAAI,SAACyC,GAAD,OACX,6BAAKA,eCsBNC,MAjEf,YAAgC,IAAXN,EAAU,EAAVA,QAEjB,EAAgCtH,mBAAS,IAAzC,mBAAOZ,EAAP,KAAiBmI,EAAjB,KACA,EAAgCvH,mBAAS,IAAzC,mBAAOwH,EAAP,KAAiBC,EAAjB,KACA,EAAwDzH,mBAAS,IAAjE,mBAAO6H,EAAP,KAA6BC,EAA7B,KACA,EAA4B9H,mBAAS,IAArC,mBAAOkG,EAAP,KAyBA,OAzBA,KA0BI,uBAAMS,SAxBV,SAA4BrG,GACxBA,EAAEsG,iBACFnH,MAAM,cAAe,CACjBC,OAAQ,OACRwC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjBjD,WACAoI,WACAO,sBAAuBF,MAE5BlI,MAAK,SAACC,GACDA,EAAEC,GACFD,EAAE2C,OAAO5C,MAAK,SAACT,GAAD,OAAUoI,EAAQpI,MAEhCU,EAAE2C,OAAO5C,MAAK,SAACgI,GAAD,OAAWlF,QAAQC,IAAIiF,UAQ7C,UACI,+CACA,uBACAxH,KAAK,OACLZ,GAAG,WACHa,MAAOhB,EACPiB,SAAU,SAACC,GAAD,OAAOiH,EAAYjH,EAAEC,OAAOH,UAEtC,uBACA,+CACA,uBACAD,KAAK,WACLZ,GAAG,WACHa,MAAOoH,EACPnH,SAAU,SAACC,GAAD,OAAOmH,EAAYnH,EAAEC,OAAOH,UAEtC,uBACA,4DACA,uBACAD,KAAK,WACLZ,GAAG,wBACHa,MAAOyH,EACPxH,SAAU,SAACC,GAAD,OAAMwH,EAAwBxH,EAAEC,OAAOH,UAEjD,uBACA,wBAAQD,KAAK,SAAb,qBACA,4BAAI+F,EAAOhB,KAAI,SAACyC,GAAD,OACX,6BAAKA,a,SCbNK,MA3Cf,YAA6B,IAAZV,EAAW,EAAXA,QAEb,EAA0CtH,oBAAS,GAAnD,mBAAOiI,EAAP,KAAsBC,EAAtB,KAEA,OACI,sBAAK7I,UAAU,aAAf,UACG,oBAAIA,UAAU,QAAd,SAAsB,gDACpB4I,EACG,qCACA,cAAC,EAAD,CAAWX,QAASA,IACpB,uDACI,cAACa,EAAA,EAAD,CACA3I,QAAS,kBAAM0I,GAAiB,IADhC,4BAcJ,qCACA,cAACE,EAAD,CAAYd,QAASA,IACrB,yDAEI,cAACa,EAAA,EAAD,CAAQ3I,QAAS,kBAAM0I,GAAiB,IAAxC,8BCkGLG,MA/Hf,YAKM,EAJAnJ,KAIC,IAEH,EAAwBc,mBAAS,IAAjC,mBAAO0D,EAAP,KAAa0C,EAAb,KACA,EAAwBpG,mBAAS,IAAjC,mBAAOG,EAAP,KAAakG,EAAb,KACA,EAAsBrG,mBAAS,IAA/B,mBAAO4D,EAAP,KAAY0C,EAAZ,KACA,EAAsBtG,mBAAS,IAA/B,mBAAO2D,EAAP,KAAY4C,EAAZ,KACA,EAA4BvG,mBAAS,IAArC,mBAAO6D,EAAP,KAAe2C,EAAf,KACA,EAAsCxG,mBAAS,IAA/C,mBAAOgE,EAAP,KAAoByC,EAApB,KACA,EAAgCzG,mBAAS,MAAzC,mBAAO8D,EAAP,KAAiBwE,EAAjB,KAGA,EAA4BtI,mBAAS,IAArC,mBAAOkG,EAAP,KAAewB,EAAf,KACMa,EAAWC,cAgCjB,OACI,qCACA,2CACA,uBAEE7B,SAlCN,SAAyBrG,GACrBA,EAAEsG,iBAEF,IAAM6B,EAAW,IAAIC,SAErBD,EAASE,OAAO,OAAQjF,GACxB+E,EAASE,OAAO,MAAO/E,GACvB6E,EAASE,OAAO,SAAU9E,GAC1B4E,EAASE,OAAO,MAAOhF,GACvB8E,EAASE,OAAO,cAAexI,GAC/BsI,EAASE,OAAO,gBAAiB3E,GACjCyE,EAASE,OAAO,YAAa7E,GAE7BrE,MAAM,YAAa,CACfC,OAAQ,OAERyC,KAAMsG,IAET9I,MAAK,SAACC,GACAA,EAAEC,GACF0I,EAAS,KAER3I,EAAE2C,OAAO5C,MAAK,SAACgI,GACXD,EAAUC,EAAMzB,eAS5B,UAGI,2CACA,uBACA/F,KAAK,OACLZ,GAAG,WACHa,MAAOsD,EACPrD,SAAU,SAACC,GAAD,OAAO8F,EAAQ9F,EAAEC,OAAOH,UAElC,2CACA,uBACAD,KAAK,OACLZ,GAAG,WACHa,MAAOD,EACPE,SAAU,SAACC,GAAD,OAAO+F,EAAS/F,EAAEC,OAAOH,UAEjC,0CACF,uBACAD,KAAK,OACLZ,GAAG,UACHa,MAAOuD,EACPtD,SAAU,SAACC,GAAD,OAAOiG,EAAQjG,EAAEC,OAAOH,UAEhC,0CACF,uBACAD,KAAK,OACLZ,GAAG,UACHa,MAAOwD,EACPvD,SAAU,SAACC,GAAD,OAAOgG,EAAOhG,EAAEC,OAAOH,UAE/B,6CACF,uBACAD,KAAK,OACLZ,GAAG,aACHa,MAAOyD,EACPxD,SAAU,SAACC,GAAD,OAAOkG,EAAUlG,EAAEC,OAAOH,UAElC,oDACF,uBACAD,KAAK,OACLZ,GAAG,mBACHa,MAAO4D,EACP3D,SAAU,SAACC,GAAD,OAAOmG,EAAgBnG,EAAEC,OAAOH,UAG1C,uBACAD,KAAK,OACLyI,OAAO,UACPvI,SAAU,SAACC,GAAD,OAAOgI,EAAYhI,EAAEC,OAAOsI,MAAM,OAG5C,wBAAQ1I,KAAK,SAAb,oBACA,4BAAI+F,EAAOhB,KAAI,SAACyC,GAAD,OACX,6BAAKA,gBCSNmB,MA3Gf,WAEG,MAAwB9I,mBAAS,MAAjC,mBAAOd,EAAP,KAAaC,EAAb,KAEA,EAAwBa,mBAAS,IAAjC,mBAAO4E,EAAP,KAAaC,EAAb,KAEA,EAAsC7E,mBAAS,IAA/C,mBAAOgG,EAAP,KAAoBc,EAApB,KACA,EAA4B9G,mBAAS,IAArC,mBAEMuI,GAFN,UAEiBC,eAIjB,SAASjF,EAAUwF,GAClBjC,EAAeiC,GACftG,QAAQC,IAAIqG,GAuDZ,OATDxD,qBAAU,WACL9F,MAAM,WAAWE,MAAK,SAACC,GACfA,EAAEC,IACFD,EAAE2C,OAAO5C,MAAK,SAACT,GAAD,OAAUC,EAAQD,WAGzC,IAGEA,EAIL,gCAEI,cAAC,EAAD,CAAQA,KAAMA,EAAMC,QAASA,IAC7B,+BACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO6J,OAAK,EAACC,KAAK,OAAOC,QAAS,cAAC,EAAD,CAAQhK,KAAMA,MAEhD,cAAC,IAAD,CAAO8J,OAAK,EAACC,KAAK,OAAOC,QAAS,cAAC,EAAD,MAClC,cAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,YAAYC,QAAS,cAAC,EAAD,CAAS3F,UAAWA,EAAWyC,YAAaA,EAAac,eAAgBA,EAAgBb,YAhE1I,SAAyB8C,GAEzBtJ,MAAM,aAAD,OAAcsJ,EAAOxJ,IAC1B,CACIG,OAAQ,QACRwC,QAAS,CACL,eAAgB,oBACpBC,KAAMC,KAAKC,UAAU0G,KAExBpJ,MAAK,SAACC,GACAA,EAAEC,GACDD,EAAE2C,OACT5C,MAAK,SAAAwJ,GACF,IAAMC,EAAiB,YAAIxE,GAAMM,KAAI,SAAC5B,GAClC,OAAGA,EAAI/D,KAAOwJ,EAAOxJ,GACVwJ,EAEAzF,KAGfuB,EAAQuE,GACRb,EAAS,KAET9F,QAAQC,IAAI0G,MAGRxJ,EAAE2C,OAAO5C,MAAK,SAACgI,GAAD,OAAWlF,QAAQC,IAAIiF,cAgDnC,cAAC,IAAD,CAAOqB,OAAK,EAACC,KAAK,iBAAiBC,QAAS,cAAC,EAAD,CAAWtE,KAAMA,EAAMoB,YAAaA,EAAac,eAAgBA,MAC7G,cAAC,IAAD,CAAOkC,OAAK,EAACC,KAAK,YAAYC,QAAS,cAAC,EAAD,MAEvC,cAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,IAAIC,QAAS,cAAC,EAAD,CAAW3F,UAAWA,EAAWqB,KAAMA,EAAMC,QAASA,EAAS3F,KAAMA,cAzB1F,cAAC,EAAD,CAAQoI,QAASnI,KCvExBkK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB5J,MAAK,YAAkD,IAA/C6J,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OAEL,cAAC,IAAD,UACA,cAAC,EAAD,MAGFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.4c706801.chunk.js","sourcesContent":["import {Link} from 'react-router-dom';\n\n\nfunction NavBar({user, setUser}) {\n\n    function handleLogout(){\n        fetch('/api/logout', {\n            method: \"DELETE\"\n        }).then((r) => {\n            if (r.ok) {\n                setUser(null)\n            }\n        })\n    }\n    return (\n        <>\n         <h3>Welcome, {user.username}!</h3>\n        <h1 className='title'>\n            <Link to='/'><h2>Healthy Pets!</h2></Link>\n        </h1>\n        <nav>\n            <button id='logout-button' onClick={handleLogout}>Logout</button>\n        </nav>\n        <nav>\n            <button id='new-pet-button'>\n                <Link to='/new'>NewPet</Link>\n            </button>\n        </nav>\n        \n        </>\n    )\n\n}\n\nexport default NavBar","import {useState} from 'react';\n\nfunction Event({petId}) {\n\n    const [eventData, setEventData] = useState(['event']);\n    const [text, setText] = useState('hi');\n\n    // function showEvents() {\n    //     fetch(\"api/events\")\n    //     .then((r) => r.json())\n    //     .then((eventsArray) => {\n    //         setEventData(eventsArray);\n    //     });\n    // }\n\n    // function handleNewEvent(event) {\n\n    // }\n\n  \n\n    function handleSubmitEvent(e) {\n        e.preventDefault();\n\n        \n        fetch(\"api/events\", {\n            method: \"POST\",\n            // headers: {\n            //     \"Content-Type\": \"application/json\"\n            // },\n            body: JSON.stringify({\n                text: text, \n                pet_id: petId\n            }),\n        })\n        .then((r) => r.json())\n        .then((newEvent) => setEventData(newEvent))\n    }\n\n    return (\n        <>\n        <form\n        //  onSubmit={handleSubmitEvent}\n         >\n            <input\n            type='text'\n            value={text}\n            onChange={(e) => setText(e.target.value)}\n            >Input Changes</input>\n        </form>\n        <button type='submit'>Submit</button>\n        </>\n    )\n}\n\nexport default Event;","import {useEffect, useState} from 'react';\nimport FullCalendar, {formatData} from '@fullcalendar/react';\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from '@fullcalendar/interaction';\n\nimport Event from './Event';\n\n\nfunction HealthLog({id}) {\n\n\n      // const renderEventContent = (eventInfo) => {\n      //   return (\n      //     <>\n      //       <b>{eventInfo.timeText}</b>\n      //       <i>{eventInfo.event.title}</i>\n      //     </>\n      //   )\n      // }\n   \n   \n     const handleDateSelect = (selectInfo) => {\n        // setShowEventForm(true);\n        let title = prompt('Please enter a new title for your event')\n        let calendarApi = selectInfo.view.calendar\n    \n        calendarApi.unselect() // clear date selection\n    \n        if (title) {\n          calendarApi.addEvent({\n            // id: createEventId(),\n            title,\n            start: selectInfo.startStr,\n            end: selectInfo.endStr\n            // allDay: selectInfo.allDay\n          })\n          // setText(title);\n          // setStartTime(start);\n          // setEndTime(end);\n          // console.log(title)\n\n          fetch(\"api/events\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n    \n            },\n            body: JSON.stringify({\n            \n                title: title,\n                pet_id: id,\n                start: selectInfo.startStr,\n                end: selectInfo.endStr\n               \n                // start_time: start,\n                // end_time: end\n          \n    \n            }),\n        })\n        .then((r) => r.json())\n        .then((data) => console.log(data))\n        }\n  \n        }\n\n       \n    \n\n    const handleEventClick = (clickInfo) => {\n      if(window.confirm(`Are you sure you want to delete the event '${clickInfo.event.title}'?`)) {\n\n        clickInfo.event.remove();\n\n        fetch(`api/events/${clickInfo.event.id}`, \n          {\n          method: \"DELETE\"\n          }\n        )\n      }\n    }\n    return (\n        <>\n        <div id=\"calendar\"> \n        <FullCalendar \n        initialView=\"timeGridWeek\"\n\n        headerToolbar={{\n            left: \"prev,next,today,addEventButton\",\n            center: \"title\",\n            right: \"dayGridMonth,timeGridWeek,timeGridDay\"\n        }}\n        // customButtons={{\n        //     addEventButton: {\n        //         text: 'add event..'\n                 \n        // }}}\n        plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n        // dateClick={() => handleSubmitEvent}\n        editable={true}\n        selectable={true}\n        selectMirror={true}\n        select={handleDateSelect}\n        events={ {\n          url: `api/pets/${id}`,\n          color: 'white',\n          textColor: 'black'\n        \n        }}\n        // eventMouseEnter={'click to delete'}\n        eventClick={handleEventClick}\n    \n        \n        \n        />\n        </div>\n        \n    \n        \n        {/* <Event />  */}\n\n      \n        </>\n    )\n}\n\nexport default HealthLog;","import { useState } from 'react';\nimport {Card, Image, Icon } from 'semantic-ui-react';\nimport {Link} from 'react-router-dom'\nimport HealthLog from './HealthLog';\n\nfunction PetCard({pet, selectPet, onDeletePet, onUpdatePet }) {\n\n// make an edit form\n// update pet on click \n\n    const {id, name, sex, age, weight} = pet;\n\n    const petImage = pet.pet_image;\n    const healthIssue = pet.health_issues\n    const type = pet.type_of_pet\n\n    const [showLog, setShowLog] = useState(true)\n\n    // function handlePetUpdate(e) {\n\n    //     const formData = new FormData();\n       \n    //     formData.append('name', name)\n    //     formData.append('age', age)\n    //     formData.append('weight', weight)\n    //     formData.append('sex', sex)\n    //     formData.append('type_of_pet', type)\n    //     formData.append('health_issues', healthIssue)\n    //     formData.append('pet_image', petImage)\n    \n    //     fetch(`/api/pets/${id}`, {\n    //         method: \"PATCH\",\n     \n    //         body: formData\n    //         })\n    //         .then((r) => r.json())\n    //         .then((data) => onUpdatePet(data))\n    // }\n    // function handleEditClick() {\n    //     fetch(`/api/pets/${id}`, {\n    //       method: \"PATCH\",\n    //       body: JSON.stringify({\n    //         name,\n    //         sex,\n    //         type_of_pet: type,\n    //         age,\n    //         weight,\n    //         health_issues: healthIssue,\n    //         pet_image: petImage\n    //       })\n    //     })\n    //     .then((r) => r.json())\n    //     .then((updatedPet) => {\n    //         onUpdatePet(updatedPet)\n    //     });\n    // }\n\n//    function showThisPet(id) {\n//        fetch(`/api/pets/${id}`)\n//        .then((r) => r.json())\n//        .then((pet) => {\n//            console.log(pet)\n//         //    setShowLog(true)\n//        })   \n//    }\n\n\n  \n\n    return( \n        <>\n        <Card className='pet-cards'>\n            <Card.Content>\n                <h2>{name}</h2>\n                <Image className='pet-image' src={petImage} alt=\"my pet\"></Image>\n                     <Card.Description id=\"pet-info\">    \n                    <span>\n                    {sex} \n                    </span>\n                    <br></br>\n                    <span>{type}</span>\n                    <br></br>\n                       <span>Age: {age}</span> \n                       <br></br>\n                       <span>Weight: {weight} lbs</span>\n                       <br></br>\n                       <span>Health issues: {healthIssue}</span>\n                       <br></br>\n                  \n                        <button className='pet-button'>\n                        <Link onClick={() => selectPet(pet)} to={'/edit/'+ id}>Edit Info</Link>\n\n                        </button>\n                           \n                       <button className='pet-button' \n                        onClick={() => onDeletePet(id)}\n                        >Remove</button>\n\n                        <button\n                        className='pet-button'\n                        onClick={() => setShowLog(!showLog)}>show/hide log</button>\n                        {showLog ? <HealthLog id={id}/> : null}\n                        </Card.Description>\n                        \n                        {/* <HealthLog /> */}\n            </Card.Content>\n            \n        </Card>\n\n      \n        </>\n    )\n}\n\nexport default PetCard;","import {useEffect, useState} from 'react';\nimport {Link} from 'react-router-dom';\n// import EditPet from './EditPet';\n// import EditPet from './EditPet';\nimport PetCard from './PetCard';\n\nfunction PetList({pets, selectPet, setPets }) {\n\n    // const [pets, setPets] = useState([]);\n    \n    // const [selectedPet, setSelectedPet] = useState({});\n    \n    // function selectPet(petObj) {\n    //     setSelectedPet(petObj)\n    // }\n\n\n    // useEffect(() => {\n    //     fetch('/api/pets')\n    //     .then((r) => r.json())\n    //     .then(setPets)\n\n    // }, []);\n\n    function handleDeletePet(id) {\n\n        const updatedPets = pets.filter((pet) => pet.id  !== id);\n\n        fetch(`/api/pets/${id}`, {\n           method: \"DELETE\"\n        });\n        setPets(updatedPets);\n    }\n    \n    \n\n    // function handleUpdate(updatedPet) {\n\n    //     const updatedPets = pets.map((pet) => {\n    //         return pet.id === updatedPet.id ? updatedPet : pet\n    //     })\n    //     setPets(updatedPets);\n        // setPets((pets) => \n        //     pets.map((pet) => {\n            \n        //         return pet.id === updatedPet.id ? updatedPet : pet;\n        //     })\n        //  );\n        // fetch(`/api/pets/${id}`, {\n        //   method: \"PATCH\",\n        //   body: JSON.stringify({\n        //     name,\n        //     sex,\n        //     type_of_pet: type,\n        //     age,\n        //     weight,\n        //     health_issues: healthIssue,\n        //     pet_image: petImage\n        //   })\n        // })\n    // }\n\n    \n    // function handlePetChange(petObj) {\n\n    //     fetch(`api/pets/${petObj.id}`, \n    //     {\n    //         method: \"PATCH\",\n    //         headers: {\n    //             \"Content-Type\": \"application/json\" } ,\n    //         body: JSON.stringify(petObj)\n    //     })\n    //     .then((r) => {\n    //         if(r.ok) {\n    //             r.json()\n    //     .then(_ => {\n    //         const updatedPetList = [...pets].map((pet) => {\n    //             if(pet.id === petObj.id){\n    //                 return petObj\n    //             } else {\n    //                 return pet;\n    //             }\n    //         }) \n    //         setPets(updatedPetList);\n    //         console.log(updatedPetList);\n    //     })\n    //         }else {\n    //             r.json().then((error) => console.log(error))\n    //         }\n    //     })\n    \n    //     // console.log(petObj)\n    // }\n\n\n    return (\n        <>\n        {pets.length > 0 ? (\n            pets.map((pet) => (\n                \n                <PetCard key={pet.id} \n              \n                pet={pet}\n                selectPet={selectPet}\n                onDeletePet={handleDeletePet}\n\n                // onUpdatePet={handlePetChange}\n                />\n            ))\n        ) : (\n            <>\n            {/* <h2>No Pets Found</h2> */}\n           <p>\n               We're here to help you track of any changes in your pet's behavior, to keep them happy and healthy. Just add a new pet to get started!\n           </p>\n          \n            </>\n        )}\n\n        </>\n    )\n}\n\nexport default PetList;",";\n\nfunction HealthTipCard({text}) {\n\n    return (\n        <>\n         \n     \n            <p>{text}</p>\n        \n    \n        </>\n    )\n}\n\nexport default HealthTipCard","import { useEffect, useState} from 'react';\nimport {List, Container} from 'semantic-ui-react';\nimport HealthTipCard from './HealthTipCard';\n\nfunction HealthTips() {\n\n    const [healthTips, setHealthTips] = useState([]);\n    \n    useEffect(() => {\n        fetch('/api/health_tips')\n        .then((r) => r.json())\n        .then((data) => setHealthTips(data))\n    },[])\n    const tips = healthTips.map((tip) => (\n        <HealthTipCard key={tip.id} text={tip.text}>\n            </HealthTipCard>\n    ))\n    const randomTip = tips[Math.floor(Math.random() * tips.length)]\n\n    return (\n        <>\n        <h3>\n        <Container className='health-tips'>\n        <h2>Health Tips for Your Furry Friend</h2>\n        <h4>\n        {randomTip}\n        </h4>\n        </Container>\n        </h3>\n        </>\n    )\n}\n\nexport default HealthTips;","import { useState, useEffect } from \"react\";\nimport PetCard from \"./PetCard\";\n// import {withRouter} from 'react-router-dom'\n\nfunction EditPet(\n  {user, selectedPet, onPetChange, errors, handleImageChange\n    //  id,\n    //  name, type, age, sex, weight, healthIssue, petImage, setAge, setHealthIssue, setName, setPetImage, setSex, setType, setWeight\n    }) {\n\n      // const [errors, setErrors] = useState([])\n\n\n    const [name, setName] = useState('');\n    const [type, setType] = useState('');\n    const [age, setAge] = useState('');\n    const [sex, setSex] = useState('');\n    const [weight, setWeight] = useState('');\n    const [healthIssue, setHealthIssue] = useState('');\n    // const [petImage, setPetImage] = useState(null)\n\n    const [id, setPetId] = useState(0);\n    // const [imageId, setImageId] = useState(0);\n\n    useEffect(() => {\n      setPetId(selectedPet.id)\n      setName(selectedPet.name)\n      setAge(selectedPet.age)\n      setWeight(selectedPet.weight)\n      setType(selectedPet.type_of_pet)\n      setSex(selectedPet.sex)\n      setHealthIssue(selectedPet.health_issues)\n      // setPetImage(selectedPet.pet_image)\n\n    }, [selectedPet]);\n\n    function handleSubmit(e) {\n      e.preventDefault();\n      const updatedPet = {\n        id: id, \n        name: name,\n        age: age, \n        weight: weight, \n        health_issues: healthIssue,\n        sex: sex,\n        type_of_pet: type, \n        \n        // pet_image: petImage\n      }\n\n      onPetChange(updatedPet)\n      \n      // handlePetChange()\n    }\n\n    // function handleImageChange(e) {\n    //   if(e.target.files[0]) this.setState({newPhoto: e.target.files[0]});\n    // }\n\n    // function handleSubmitPhoto() {\n    //   fetch(`/api/pets/${id}`)\n    // }\n \n    //     const [errors, setErrors] = useState([])\n    // const {id, name, sex, type, age, weight} = pet;\n\n    // const petImage = pet.pet_image;\n    // const healthIssue = pet.health_issues\n    return(\n        <>\n        \n        \n        <form \n        // encType=\"multipart/form-data\"\n         onSubmit={handleSubmit}>\n            <label>Name: </label>\n            <input\n            type=\"text\"\n            id=\"pet-name\"\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n            ></input>\n            <label>Type: </label>\n            <input\n            type=\"text\"\n            id=\"pet-type\"\n            value={type}\n            onChange={(e) => setType( e.target.value)}\n            ></input>\n              <label>Sex: </label>\n            <input\n            type=\"text\"\n            id=\"pet-sex\"\n            value={sex}\n            onChange={(e) => setSex( e.target.value)}\n            ></input>\n              <label>Age: </label>\n            <input\n            type=\"text\"\n            id=\"pet-age\"\n            value={age}\n            onChange={(e) => setAge(e.target.value)}\n            ></input>\n              <label>Weight: </label>\n            <input\n            type=\"text\"\n            id=\"pet-weight\"\n            value={weight}\n            onChange={(e) => setWeight(e.target.value)}\n            ></input>\n              <label>Health Issues: </label>\n            <input\n            type=\"text\"\n            id=\"pet-health-issue\"\n            value={healthIssue}\n            onChange={(e) => setHealthIssue( e.target.value)}\n            ></input>\n\n         \n              \n            <button type='submit'>Submit</button>\n            {/* <p>{errors.map((error) => (\n                <li>{error}</li>\n            ))}\n                </p> */}\n        </form>\n\n        {/* <form onSubmit={handleImageChange}>\n        <input\n            type=\"file\"\n            accept=\"image/*\"\n            onChange={(e) => setPetImage(e.target.files[0])}\n            ></input>\n        </form> */}\n\n\n        </>\n    )\n}\n\nexport default EditPet;","import PetList from '../components/PetList';\nimport HealthTips from '../components/HealthTips';\nimport {useState, useEffect} from 'react';\nimport EditPet from '../components/EditPet';\n\nfunction HomePage({selectPet, selectedPet, setSelectedPet, pets, setPets, user}) {\n\n\n    useEffect(() => {\n        fetch('/api/pets')\n        .then((r) => r.json())\n        .then(setPets)\n\n    }, []);\n    \n\n\n\n    return (\n        <>\n       \n     \n        \n        <PetList pets={pets} setPets={setPets} selectPet={selectPet}/>\n\n        {/* <iframe src=\"https://giphy.com/embed/dWfi1Llz4ud1ixRIcW\" width=\"480\" height=\"343\" frameBorder=\"0\" className=\"giphy-embed\" allowFullScreen></iframe><a href=\"https://giphy.com/gifs/PlanetFitness-dWfi1Llz4ud1ixRIcW\"></a> */}\n    \n        <div id= 'gif-container'>\n            <iframe src=\"https://giphy.com/embed/1AhgJ8czcvMreU0haV\" width=\"480\" height=\"270\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen></iframe><a href=\"https://giphy.com/gifs/roverdotcom-rover-peanut-butter-gifmedogs-1AhgJ8czcvMreU0haV\"></a>\n\n            <iframe src=\"https://giphy.com/embed/ZQqiFdS5CMcLK\" width=\"480\" height=\"269\" frameBorder=\"0\" className=\"giphy-embed\" allowFullScreen></iframe><a href=\"https://giphy.com/gifs/exercising-cat-funny-ZQqiFdS5CMcLK\"></a>\n\n            {/* <iframe src=\"https://giphy.com/embed/TA6Fq1irTioFO\" width=\"480\" height=\"270\" frameBorder=\"0\" className=\"giphy-embed\" allowFullScreen></iframe><a href=\"https://giphy.com/gifs/cat-kitty-pet-TA6Fq1irTioFO\"></a> */}\n            <iframe src=\"https://giphy.com/embed/jjvIuYHejqi9G\" width=\"480\" height=\"271\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen></iframe><a href=\"https://giphy.com/gifs/cat-kitten-and-dog-jjvIuYHejqi9G\"></a>\n        </div>\n        {/* <iframe src=\"https://giphy.com/embed/RQ5i8E7Jir4Y0\" width=\"480\" height=\"270\" frameBorder=\"0\" className=\"giphy-embed\" allowFullScreen></iframe><a href=\"https://giphy.com/gifs/giphyqa-RQ5i8E7Jir4Y0\"></a> */}\n\n        {/* <iframe src=\"https://giphy.com/embed/3ornk2v68yO67m4Le0\" width=\"480\" height=\"268\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen></iframe><a href=\"https://giphy.com/gifs/dog-eating-bag-of-chips-3ornk2v68yO67m4Le0\"></a> */}\n              \n\n        {/* <iframe src=\"https://giphy.com/embed/MW9s5soksSzEreFE9h\" width=\"480\" height=\"480\" frameBorder=\"0\" className=\"giphy-embed\" allowFullScreen></iframe><a href=\"https://giphy.com/gifs/CBeebiesHQ-gym-yoga-class-MW9s5soksSzEreFE9h\"></a> */}\n       \n    \n        {/* <EditPet handlePetChange={handlePetChange} selectedPet={selectedPet} errors={errors}/> */}\n        <HealthTips/>\n        </>\n    )\n}\n\nexport default HomePage;","import { useState } from 'react';\n\nfunction LoginForm({onLogin}) {\n\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [errors, setErrors] = useState([]);\n\n    function handleSubmit(e) {\n        e.preventDefault();\n        fetch('/api/login', {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({username, password}),\n        }).then((r) => {\n            if (r.ok) {\n                r.json().then((user) => onLogin(user));\n                \n            }else{\n                r.json().then((error) => setErrors(error.errors));\n            }\n        });\n    }\n\n    return (\n        <>\n        <form onSubmit={handleSubmit}>\n            <label>Username</label>\n            <input\n            type='text'\n            id='username'\n            value={username}\n            onChange={(e) => setUsername(e.target.value)}\n            >\n            </input>\n            <label>Password</label>\n            <input\n            type='password'\n            id='password'\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            ></input>\n            <button type='submit'>Login</button>\n            <p>{errors.map((error) => (\n                <li>{error}</li>\n            ))}</p>\n        </form>\n        </>\n    )\n}\n\nexport default LoginForm;","import {useState} from 'react';\n\n\nfunction SignUpForm({onLogin}) {\n\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [passwordConfirmation, setPasswordConfirmation] = useState('');\n    const [errors, setErrors] = useState([]);\n\n    function handleSignupSubmit(e) {\n        e.preventDefault();\n        fetch('/api/signup', {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            }, \n            body: JSON.stringify({\n                username, \n                password,\n                password_confirmation: passwordConfirmation\n            }),\n        }).then((r) => {\n            if (r.ok) {\n                r.json().then((user) => onLogin(user));\n            }else{\n                r.json().then((error) => console.log(error))\n            }\n        });\n\n    }\n\n\n    return(\n        <form onSubmit={handleSignupSubmit}>\n            <label>Username: </label>\n            <input \n            type=\"text\"\n            id=\"username\"\n            value={username}\n            onChange={(e) => setUsername(e.target.value)}\n            ></input>\n            <br></br>\n            <label>Password: </label>\n            <input\n            type=\"password\"\n            id='password'\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            ></input>\n            <br></br>\n            <label>Password Confirmation: </label>\n            <input\n            type=\"password\"\n            id=\"password_confirmation\"\n            value={passwordConfirmation}\n            onChange={(e)=> setPasswordConfirmation(e.target.value)}\n            ></input>\n            <br></br>\n            <button type='submit'>Sign Up</button>\n            <p>{errors.map((error) => (\n                <li>{error}</li>\n            ))}\n                </p>\n        </form>\n    )\n}\n\nexport default SignUpForm;","import { useState } from 'react';\nimport LoginForm from '../components/LoginForm';\nimport SignupForm from '../components/SignupForm';\nimport { Button } from 'semantic-ui-react'\n\nfunction Login({ onLogin }) {\n\n    const [showLoginForm, setShowLoginForm] = useState(true)\n\n    return (\n        <div className='login-page'>\n           <h1 className='title'><h2>Healthy Pets</h2></h1>\n            {showLoginForm ? (\n                <>\n                <LoginForm onLogin={onLogin}/>\n                <p>Don't have an account? \n                    <Button\n                    onClick={() => setShowLoginForm(false)}> Sign Up\n                    </Button>\n                </p>\n                {/* <iframe src=\"https://giphy.com/embed/uLjx3T8zp2ZWPe3yN5\" width=\"480\" height=\"480\" frameBorder=\"0\" className=\"giphy-embed\" allowFullScreen></iframe><p><a href=\"https://giphy.com/gifs/bestfriends-cat-workout-weight-lifting-uLjx3T8zp2ZWPe3yN5\">via GIPHY</a></p> */}\n            \n              {/*cat lifting weights */}\n              \n                {/* <iframe src=\"https://giphy.com/embed/uLjx3T8zp2ZWPe3yN5\" width=\"480\" height=\"270\" frameBorder=\"0\" className=\"giphy-embed\" allowFullScreen></iframe><a href=\"https://giphy.com/gifs/bestfriends-cat-workout-weight-lifting-uLjx3T8zp2ZWPe3yN5\"></a> */}\n           \n      \n                </>\n\n            ) : (\n                <>\n                <SignupForm onLogin={onLogin}/>\n                <p>\n                    Already have an account? \n                    <Button onClick={() => setShowLoginForm(true)}>\n                        Log In\n                    </Button>\n                </p>\n                \n                </>\n            )}\n        </div>\n    )\n    \n}\n\n\n\nexport default Login;","import { useState } from 'react';\nimport {useNavigate} from 'react-router-dom';\nimport {Card, Image } from 'semantic-ui-react';\nimport EditPet from '../components/EditPet';\n\nfunction NewPet(\n     {user,\n    //  name, type, age, sex, weight, healthIssue, petImage,\n    //   setAge, setHealthIssue, setName, setPetImage, setSex, setType, setWeight\n    }\n    ) {\n\n    const [name, setName] = useState('');\n    const [type, setType] = useState('');\n    const [age, setAge] = useState('');\n    const [sex, setSex] = useState('');\n    const [weight, setWeight] = useState('');\n    const [healthIssue, setHealthIssue] = useState('');\n    const [petImage, setPetImage] = useState(null)\n    \n   \n    const [errors, setErrors] = useState([]);\n    const navigate = useNavigate();\n\n\n    function handleSubmitPet(e) {\n        e.preventDefault();\n\n        const formData = new FormData();\n       \n        formData.append('name', name)\n        formData.append('age', age)\n        formData.append('weight', weight)\n        formData.append('sex', sex)\n        formData.append('type_of_pet', type)\n        formData.append('health_issues', healthIssue)\n        formData.append('pet_image', petImage)\n    \n        fetch('/api/pets', {\n            method: \"POST\",\n     \n            body: formData\n            })\n        .then((r) => {\n            if(r.ok) {\n               navigate('/');\n            }else {\n                r.json().then((error)=> {\n                    setErrors(error.errors)\n                });\n            }\n        });\n    }\n\n    return(\n        <>\n        <h2>Add a Pet</h2>\n        <form\n        //  encType='multipart/form-data'\n          onSubmit={handleSubmitPet}>\n            <label>Name: </label>\n            <input\n            type=\"text\"\n            id=\"pet-name\"\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n            ></input>\n            <label>Type: </label>\n            <input\n            type=\"text\"\n            id=\"pet-type\"\n            value={type}\n            onChange={(e) => setType( e.target.value)}\n            ></input>\n              <label>Sex: </label>\n            <input\n            type=\"text\"\n            id=\"pet-sex\"\n            value={sex}\n            onChange={(e) => setSex( e.target.value)}\n            ></input>\n              <label>Age: </label>\n            <input\n            type=\"text\"\n            id=\"pet-age\"\n            value={age}\n            onChange={(e) => setAge(e.target.value)}\n            ></input>\n              <label>Weight: </label>\n            <input\n            type=\"text\"\n            id=\"pet-weight\"\n            value={weight}\n            onChange={(e) => setWeight(e.target.value)}\n            ></input>\n              <label>Health Issues: </label>\n            <input\n            type=\"text\"\n            id=\"pet-health-issue\"\n            value={healthIssue}\n            onChange={(e) => setHealthIssue( e.target.value)}\n            ></input>\n\n            <input\n            type=\"file\"\n            accept=\"image/*\"\n            onChange={(e) => setPetImage(e.target.files[0])}\n            ></input>\n              \n            <button type='submit'>Submit</button>\n            <p>{errors.map((error) => (\n                <li>{error}</li>\n            ))}\n                </p>\n        </form>\n    \n        {/* <Card className='cards'>\n            <Card.Content>\n\n                <Card.Header>{name}</Card.Header>\n                <Image className='pet-image'  src={petImage}></Image>\n                <Card.Description>{age} year old {type} with {healthIssue}. Weighs {weight} lbs. Belongs to {user.username}</Card.Description>\n            </Card.Content>\n         \n        </Card> */}\n\n\n        \n        </>\n    )\n}\n\nexport default NewPet;\n\n","import { useState, useEffect} from 'react'\nimport {  Routes, Route, useNavigate } from 'react-router-dom';\nimport NavBar from './NavBar';\nimport HomePage from '../pages/HomePage';\nimport Login from '../pages/Login';\nimport NewPet from '../pages/NewPet';\nimport EditPet from './EditPet';\nimport PetCard from './PetCard';\nimport HealthLog from './HealthLog';\nimport Event from './Event';\n// import HealthTips from './HealthTips';\n// import PetList from './PetList';\n\nfunction App() {\n\n   const [user, setUser] = useState(null);\n   \n   const [pets, setPets] = useState([]);\n    \n   const [selectedPet, setSelectedPet] = useState({});\n   const [errors, setErrors] = useState([]);\n\n   const navigate = useNavigate();\n  \n    \n \n   function selectPet(petObj) {\n    setSelectedPet(petObj)\n    console.log(petObj)\n}\n\n  function handlePetChange(petObj) {\n\n  fetch(`/api/pets/${petObj.id}`, \n  {\n      method: \"PATCH\",\n      headers: {\n          \"Content-Type\": \"application/json\" } ,\n      body: JSON.stringify(petObj)\n  })\n  .then((r) => {\n      if(r.ok) {\n          r.json()\n  .then(_ => {\n      const updatedPetList = [...pets].map((pet) => {\n          if(pet.id === petObj.id){\n              return petObj\n          } else {\n              return pet;\n          }\n      }) \n      setPets(updatedPetList);\n      navigate('/');\n\n      console.log(updatedPetList);\n  })\n      }else {\n          r.json().then((error) => console.log(error))\n      }\n  })\n\n\n  // console.log(petObj)\n}\n   \n  //  const [name, setName] = useState('');\n  //  const [type, setType] = useState('');\n  //  const [age, setAge] = useState('');\n  //  const [sex, setSex] = useState('');\n  //  const [weight, setWeight] = useState('');\n  //  const [healthIssue, setHealthIssue] = useState('');\n  //  const [petImage, setPetImage] = useState(null)\n\n\n   useEffect(() => {\n        fetch('/api/me').then((r) => {\n            if (r.ok) {\n                r.json().then((user) => setUser(user));\n            }\n        });\n    }, []);\n\n\n    if (!user) return <Login  onLogin={setUser} />;\n\n\n  return (\n    <div>\n        \n        <NavBar user={user} setUser={setUser}/>\n        <main>\n          <Routes>\n            <Route exact path='/new' element={<NewPet user={user}/>}>\n            </Route>\n            <Route exact path='/:id' element={<PetCard />}></Route>\n            <Route exact path='/edit/:id' element={<EditPet selectPet={selectPet} selectedPet={selectedPet} setSelectedPet={setSelectedPet} onPetChange={handlePetChange}\n            // name={name} setName={setName} \n            // type={type} setType={setType} \n            // age={age} setAge={setAge}\n            // sex={sex} setSex={setSex} \n            // weight={weight} setWeight={setWeight} \n            // healthIssue={healthIssue} setHealthIssue={setHealthIssue} \n            // petImage={petImage} setPetImage={setPetImage}\n            />}\n            ></Route>\n            <Route exact path='health-log/:id' element={<HealthLog pets={pets} selectedPet={selectedPet} setSelectedPet={setSelectedPet} />}></Route>\n            <Route exact path='event/:id' element={<Event/>}>\n            </Route>\n            <Route exact path='/' element={<HomePage  selectPet={selectPet} pets={pets} setPets={setPets} user={user}/>}>\n            </Route>\n         \n          </Routes>\n\n        </main>\n   \n  \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './components/App'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <BrowserRouter>\n    <App />\n    </BrowserRouter>,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}